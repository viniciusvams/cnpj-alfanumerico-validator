/**
 * Valida√ß√£o de CNPJ Alfanum√©rico
 * Biblioteca JavaScript especializada em CNPJ alfanum√©rico, com suporte completo para CNPJ num√©rico e CPF
 * @version 1.0.0
 * @author https://github.com/viniciusvams
 * @license MIT
 */

(function (global, factory) {
  if (typeof exports === 'object' && typeof module !== 'undefined') {
    // Para uso com Node.js (CommonJS)
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    // Para uso com AMD (RequireJS)
    define(factory);
  } else {
    // Para uso direto no navegador
    global.CNPJValidator = factory();
  }
}(typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : this, function () {
  'use strict';

  /**
   * üõ†Ô∏è UTILIT√ÅRIOS GERAIS
   * Fun√ß√µes auxiliares que ajudam na manipula√ß√£o de strings e n√∫meros
   */
  const UtilitariosGerais = {
    
    /**
     * Limpa uma string deixando apenas n√∫meros
     * Exemplo: "123.456.789-01" vira "12345678901"
     */
    apenasNumeros: function(texto) {
      if (!texto) return '';
      return texto.replace(/\D/g, '');
    },

    /**
     * Remove caracteres especiais usando um padr√£o personalizado
     * √ötil para limpeza mais espec√≠fica de documentos
     */
    limparComPadrao: function(texto, padrao) {
      if (!texto) return '';
      return texto.replace(padrao, '');
    },

    /**
     * Verifica se todos os d√≠gitos de uma string s√£o iguais
     * Exemplo: "111111111" retorna true, "123456789" retorna false
     */
    todosDigitosIguais: function(texto) {
      if (!texto) return false;
      return /^(\d)\1+$/.test(texto);
    },

    /**
     * Gera um n√∫mero aleat√≥rio entre o m√≠nimo e m√°ximo (inclusivo)
     * Usado para gerar d√≠gitos aleat√≥rios nos documentos
     */
    numeroAleatorio: function(minimo, maximo) {
      return Math.floor(Math.random() * (maximo - minimo + 1)) + minimo;
    },

    /**
     * Converte texto para mai√∫sculas de forma segura
     * Protege contra valores null ou undefined
     */
    converterParaMaiuscula: function(texto) {
      if (!texto) return '';
      return texto.toString().toUpperCase();
    }
  };

  /**
   * üìÑ VALIDADOR E GERADOR DE CPF
   * Fun√ß√µes espec√≠ficas para trabalhar com Cadastro de Pessoa F√≠sica
   */
  const CPF = {
    
    /**
     * Valida se um CPF √© v√°lido ou n√£o
     * @param {string} cpf - O CPF a ser validado (pode ter formata√ß√£o ou n√£o)
     * @returns {boolean} - true se v√°lido, false se inv√°lido
     */
    validate: function(cpf) {
      // Se n√£o foi fornecido um CPF, consideramos inv√°lido
      if (!cpf) {
        return false;
      }
      
      // Remove toda a formata√ß√£o, deixando apenas n√∫meros
      const cpfLimpo = UtilitariosGerais.apenasNumeros(cpf);
      
      // Um CPF v√°lido deve ter exatamente 11 d√≠gitos
      if (cpfLimpo.length !== 11) {
        return false;
      }
      
      // CPFs com todos os d√≠gitos iguais s√£o inv√°lidos (ex: 111.111.111-11)
      if (UtilitariosGerais.todosDigitosIguais(cpfLimpo)) {
        return false;
      }

      // C√ÅLCULO DO PRIMEIRO D√çGITO VERIFICADOR
      // Multiplica cada um dos 9 primeiros d√≠gitos por pesos decrescentes (10, 9, 8, ..., 2)
      let somaParaPrimeiroDV = 0;
      for (let posicao = 0; posicao < 9; posicao++) {
        const digito = parseInt(cpfLimpo.charAt(posicao));
        const peso = 10 - posicao; // Pesos: 10, 9, 8, 7, 6, 5, 4, 3, 2
        somaParaPrimeiroDV += digito * peso;
      }
      
      // Calcula o primeiro d√≠gito verificador
      let primeiroDV = (somaParaPrimeiroDV * 10) % 11;
      if (primeiroDV === 10) {
        primeiroDV = 0; // Se der 10, vira 0
      }
      
      // Compara com o 10¬∫ d√≠gito do CPF
      if (primeiroDV !== parseInt(cpfLimpo.charAt(9))) {
        return false;
      }

      // C√ÅLCULO DO SEGUNDO D√çGITO VERIFICADOR
      // Multiplica cada um dos 10 primeiros d√≠gitos por pesos decrescentes (11, 10, 9, ..., 2)
      let somaParaSegundoDV = 0;
      for (let posicao = 0; posicao < 10; posicao++) {
        const digito = parseInt(cpfLimpo.charAt(posicao));
        const peso = 11 - posicao; // Pesos: 11, 10, 9, 8, 7, 6, 5, 4, 3, 2
        somaParaSegundoDV += digito * peso;
      }
      
      // Calcula o segundo d√≠gito verificador
      let segundoDV = (somaParaSegundoDV * 10) % 11;
      if (segundoDV === 10) {
        segundoDV = 0; // Se der 10, vira 0
      }

      // Compara com o 11¬∫ d√≠gito do CPF
      return segundoDV === parseInt(cpfLimpo.charAt(10));
    },

    /**
     * Gera um CPF v√°lido aleat√≥rio
     * @param {Object} opcoes - Configura√ß√µes para gera√ß√£o
     * @param {boolean} opcoes.formatted - Se deve retornar formatado (padr√£o: true)
     * @returns {string} - CPF gerado
     */
    generate: function(opcoes = { formatted: true }) {
      const numerosGerados = [];
      
      // Gera os primeiros 9 d√≠gitos aleatoriamente
      console.log('üé≤ Gerando os 9 primeiros d√≠gitos do CPF...');
      for (let i = 0; i < 9; i++) {
        const digitoAleatorio = UtilitariosGerais.numeroAleatorio(0, 9);
        numerosGerados.push(digitoAleatorio);
      }

      // Calcula o primeiro d√≠gito verificador usando a mesma l√≥gica da valida√ß√£o
      console.log('üî¢ Calculando primeiro d√≠gito verificador...');
      let somaParaPrimeiroDV = 0;
      for (let i = 0; i < 9; i++) {
        somaParaPrimeiroDV += numerosGerados[i] * (10 - i);
      }
      let primeiroDV = (somaParaPrimeiroDV * 10) % 11;
      if (primeiroDV === 10) primeiroDV = 0;
      numerosGerados.push(primeiroDV);

      // Calcula o segundo d√≠gito verificador
      console.log('üî¢ Calculando segundo d√≠gito verificador...');
      let somaParaSegundoDV = 0;
      for (let i = 0; i < 10; i++) {
        somaParaSegundoDV += numerosGerados[i] * (11 - i);
      }
      let segundoDV = (somaParaSegundoDV * 10) % 11;
      if (segundoDV === 10) segundoDV = 0;
      numerosGerados.push(segundoDV);

      // Junta todos os n√∫meros
      const cpfCompleto = numerosGerados.join('');
      
      // Retorna formatado ou n√£o, conforme solicitado
      return opcoes.formatted ? this.format(cpfCompleto) : cpfCompleto;
    },

    /**
     * Formata um CPF adicionando pontos e h√≠fen
     * @param {string} cpf - CPF sem formata√ß√£o
     * @returns {string} - CPF formatado (000.000.000-00)
     */
    format: function(cpf) {
      const cpfLimpo = UtilitariosGerais.apen